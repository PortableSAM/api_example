{"version":3,"sources":["components/ApiCall.js","App.js","serviceWorker.js","index.js"],"names":["API_URL","ApiCall","state","users","getApi","a","URL","axios","get","then","res","data","setState","console","log","this","className","map","user","key","id","src","name","username","email","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yTAMMA,G,MAAU,wCAwDDC,E,2MArDbC,MAAQ,CACNC,MAAO,I,EAGTC,O,sBAAS,4BAAAC,EAAA,6DACDC,EADC,UACQN,EADR,mBAEDO,IACHC,IAAIF,GACJG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,QAChBF,MAAK,SAAAE,GACJ,EAAKC,SAAS,CACZT,MAAOQ,IAETE,QAAQC,IAAI,EAAKZ,MAAMC,UATpB,2C,mFAcPY,KAAKX,W,+BAIL,OACE,6BACE,yBAAKY,UAAU,cACb,kEAEF,yBAAKA,UAAU,aACZD,KAAKb,MAAMC,MAAMc,KAAI,SAAAC,GAAI,OACxB,yBAAKF,UAAU,OAAOG,IAAKD,EAAKE,IAC9B,yBAAKC,IAAI,0HACT,4BACE,wBAAIL,UAAU,UACZ,qCACCE,EAAKI,MAER,wBAAIN,UAAU,UACZ,0CACCE,EAAKK,UAER,wBAAIP,UAAU,UACZ,uCACCE,EAAKM,kB,GA3CFC,IAAMC,WCMbC,E,iLARX,OACE,yBAAKX,UAAU,kBACb,kBAAC,EAAD,W,GAJUS,IAAMC,WCQJE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,MAAK,SAAA+B,GACjCA,EAAaC,kB","file":"static/js/main.03678ae0.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/alt-text */\r\nimport React from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport \"./ApiCell.css\";\r\n\r\nconst API_URL = \"https://jsonplaceholder.typicode.com\";\r\n\r\nclass ApiCall extends React.Component {\r\n  state = {\r\n    users: []\r\n  };\r\n\r\n  getApi = async () => {\r\n    const URL = `${API_URL}/users`;\r\n    await axios\r\n      .get(URL)\r\n      .then(res => res.data)\r\n      .then(data => {\r\n        this.setState({\r\n          users: data\r\n        });\r\n        console.log(this.state.users);\r\n      });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getApi();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"title_text\">\r\n          <h3>JSONPlaceholder User Data Example</h3>\r\n        </div>\r\n        <div className=\"container\">\r\n          {this.state.users.map(user => (\r\n            <div className=\"data\" key={user.id}>\r\n              <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/4/47/Linecons_user-avatar.svg/768px-Linecons_user-avatar.svg.png\" />\r\n              <ul>\r\n                <li className=\"Item_1\">\r\n                  <b>Name: </b>\r\n                  {user.name}\r\n                </li>\r\n                <li className=\"Item_2\">\r\n                  <b>Nick Name: </b>\r\n                  {user.username}\r\n                </li>\r\n                <li className=\"Item_3\">\r\n                  <b>E-Mail: </b>\r\n                  {user.email}\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ApiCall;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport ApiCall from \"./components/ApiCall\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"body_container\">\n        <ApiCall />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}